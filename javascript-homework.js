/** Pb00
* This is an example problem. Please follow the instructions on how to complete the problems.
* If there are any questions please feel free to ask.
*/

// Each problem has a function in which you add your code so solve the problem.
function wasteTime() {
    // You can define variables that you need in the function.
    let i = 0;
    //This while will loop until i is equal to 99.
    while (i < 100) {
        //Wasting some time.
        i++;
    }
    //All problems should return an answer.
    return "Please return all your answers";
}

//This is a way a simple way to track how long an operation takes.
console.time("wasteTime");
//Loggin the answer to the problem.
console.log(wasteTime());
//The timer will stop and the time will be output to the console.
console.timeEnd("wasteTime");

// We are going to save all your answers here. No changes are required on this object.
const answers = {};

/** Pb01
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */

function sumOfMultiples() {
    let i = 0;
    let total = 0;
    while (i < 1000) {
        if (i % 3 === 0 || i % 5 === 0) {
            total = total + i;
        }
        i++
    }

    return total;
}

console.time("sumOfMultiples");
answers.sumOfMultiples = sumOfMultiples();
console.timeEnd("sumOfMultiples");
console.log(answers.sumOfMultiples);

/** Pb02
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

function fibonacciSum() {
    let max = 4000000;
    let fibonacciArray = [1, 1];
    let fibbSum = 0;
    let fibbNumber = 0;
    do {
        fibbNumber = fibonacciArray[fibonacciArray.length - 2] + fibonacciArray[fibonacciArray.length - 1];
        if (fibbNumber <= max || fibbNumber % 2 === 0) {
            if (fibbNumber % 2 === 0) {
                fibbSum += fibbNumber;
            }
            fibonacciArray[fibonacciArray.length] = fibbNumber;
        }
    } while (fibbNumber < max)

    return fibbSum;
}

console.time("fibonacciSum");
answers.fibonacciSum = fibonacciSum();
console.timeEnd("fibonacciSum");
console.log(answers.fibonacciSum);

/** Pb03
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143?
 */

function largestPrimeFactor(n) {
    let largestFactor = 0;

    // Check for the smallest factors first (2 is the only even prime number)
    while (n % 2 === 0) {
        largestFactor=2;
        n = n / 2;
    }

    // Check for odd factors from 3 onwards
    for(let i = 3 ; i * i <= n ; i = i + 2){
        while (n % i === 0) {
            largestFactor=i;
            n = n / i;
        }
    }

    // Check for remaining prime factor
    if(n > 2){
        largestFactor=n;
    }
    return largestFactor;
}

console.time("largestPrimeFactor");
answers.largestPrimeFactor = largestPrimeFactor(600851475143);
console.timeEnd("largestPrimeFactor");
console.log(answers.largestPrimeFactor);

/** Pb04
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */

function largestPalindrome(number) {
    function isPalindrome(number) {
        const string = number.toString();
        const reversedString = string.split('').reverse().join('');
        return string === reversedString;
    }

    let largestPalindrome = 0;
    for (let i = 999; i >= 100; i--) {
        if(i * 999 < largestPalindrome){
            break;
        }
        for (let j = 999; j >= i; j--) {
            const product = i * j;
            if(product <= largestPalindrome){
                break;
            }
            if (isPalindrome(product)) {
                largestPalindrome = product;
            }
        }
    }
    return largestPalindrome;
}

console.time("largestPalindrome");
answers.largestPalindrome = largestPalindrome(121);
console.timeEnd("largestPalindrome");
console.log(answers.largestPalindrome);

console.log("************ Homework ************");

/** Pb05
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */

function smallestMultipleOf1to20(num) {
    /* The greatest common divisor (GCD) of two numbers, a and b, 
    is the same as the GCD of b and the remainder of dividing a by b
                GCD(a,b)=GCD(b,a%b)
    */
    function greatestCommonDivisor(a, b) {
        return b === 0 ? a : greatestCommonDivisor(b, a % b); 
    }

    //          LCM(a, b) * GCD(a, b) = a * b
    function lessCommonMultiple(a, b) {
        return a * b / greatestCommonDivisor(a, b);
    }

    var result = 1;
    for (var i = 2; i <= num; ++i)
        result = lessCommonMultiple(result, i);
    
    return result;
}

console.time("smallestMultipleOf1to20");
answers.smallestMultipleOf1to20 = smallestMultipleOf1to20(20);
console.timeEnd("smallestMultipleOf1to20");
console.log(answers.smallestMultipleOf1to20);

/** Pb06
 * The sum of the squares of the first ten natural numbers is, 12 + 22 + ... + 102 = 385
 * The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)2 = 552 = 3025
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */

function sumSquareDifference(number) {
    if (number < 0) {
        return "The number should be natural!";
    }
    else {
        const squareOfTheSum = Math.pow(number * (number + 1) / 2, 2);
        const sumOfTheSquares = number * (number + 1) * (2 * number + 1) / 6;

        return squareOfTheSum - sumOfTheSquares;
    }
}

console.time("sumSquareDifference");
answers.sumSquareDifference = sumSquareDifference(100);
console.timeEnd("sumSquareDifference");
console.log(answers.sumSquareDifference);

/** Pb07
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */

function primeAtPosition(position) {
    let number = 2, count = 0;
    
    while (count < position) {
        if (isPrime(number)) {
            count++;
        }
        number++;
    }
    // before exiting while, it is incremented one more time
    return number - 1;

    function isPrime(number) {
        if (number < 4) { // number=2 || number=3
            return true;
        }

        if (number % 2 === 0 || number % 3 === 0) {
            return false;
        }

        const val = Math.sqrt(number);

        /*       6k-1    6k+1
            k=1    5       7     => i    i+2
            k=2   11      13
              => i+6
        */
        for (let i = 5; i <= val; i += 6) {
            if (number % i === 0 || number % (i + 2) === 0) {
                return false;
            }
        }

        return true;
    }
}

console.time("primeAtPosition");
answers.primeAtPosition = primeAtPosition(10001);
console.timeEnd("primeAtPosition");
console.log(answers.primeAtPosition);

/** Pb08
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */

function largestProductInSeries(adjDigits) {
    const numberStr = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';

    const number = numberStr.split('').map(Number); //array of numbers
    let largestProduct = 0;
    let product = 1;
    let hasZero = false;

    // window with first set of adjDigits
    for (let i = 0; i < adjDigits; i++) {
        if (number[i] === 0) {
            hasZero = true;
        } else {
            product *= number[i];
        }
    }

    for (let i = adjDigits; i < number.length; i++) {
        const outDigit = number[i - adjDigits]; // the number that comes out of the window
        const inDigit = number[i]; //the number that enters the window

        if (inDigit === 0) {
            hasZero = true;
        } else {
            product *= inDigit;
        }

        if (outDigit === 0) {
            hasZero = false; //outDigit was 0, we no longer have that digit so hasZero=false
        } else {
            product /= outDigit;
        }

        if (!hasZero && product > largestProduct) {
            largestProduct = product;
        }
    }

    return largestProduct;
}
console.time("largestProductInSeries");
answers.largestProductInSeries = largestProductInSeries(13);
console.timeEnd("largestProductInSeries");
console.log(answers.largestProductInSeries);

/** Pb09
 * A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a2 + b2 = c2
 * For example, 32 + 42 = 9 + 16 = 25 = 52.
 * There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.
 */

function pythagoreanTriplet(sum) {
    // a + b + c = sum        a^2 + b^2 = c^2
    // c = sum - (a + b)       c^2 = sum^2 - 2 * sum * (a + b) + (a + b)^2
    // a^2 + b^2 = sum^2 - 2 * sum * (a + b) + a^2 + b^2 + 2 * a * b
    // 0 = sum^2 - 2 * sum * (a + b) + 2 * a * b | :2
    // 0 = sum^2 / 2 - sum * (a + b) + a * b
    // 0 = sum^2 / 2 - sum * a - sum * b +  a * b
    // 0 = sum^2 / 2 - a * (x - b) - sum * b
    // a = (x^2 / 2 - sum * b ) / (x - b)

    let a = 0, b = 0; c = 0;

    for (b = 1; b < sum; b += 1) {
        a = (Math.pow(sum, 2) / 2 - sum * b) / (sum - b);

        if (Math.floor(a) === a) { // if a is an integer
            c = sum - a - b;
            return a * b * c;
        }
    }
    
    return `There is no Pythagorean triplet for which a + b + c = ${sum} `;
}

console.time("pythagoreanTriplet");
answers.pythagoreanTriplet = pythagoreanTriplet(1000);
console.timeEnd("pythagoreanTriplet");
console.log(answers.pythagoreanTriplet);

/** Pb10
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17. Find the sum of all the primes below two million.
 */

function sumOfPrimes(limit) {
    // Sieve of Sundaram
    const arrLimit =  Math.floor((limit - 1) / 2); // all prime numbers are odd, except the number 2
    // an array with size 'limit + 1' (to ensure that we have enough space ) 
    // and all elements set to 'true' (all are considered prime numbers)
    const arr = new Array(arrLimit + 1).fill(true);

    for (let i = 1; i <= (Math.sqrt(limit) - 1) / 2; i++) {
        // (i + 1) the next odd number greater than i
        // i * (i + 1) the product of i and the next odd number
        // 2 * (i * (i + 1)) is double the previous product, ensuring that the result is always an even number

        // 2 * i + 1, we eliminate duplicate prime numbers
        for (let j = i * (i + 1) * 2; j <= arrLimit; j += 2 * i + 1) {
            arr[j] = false;
        }
    }

    let sum = 2; // 2 is prime and we'll include it in the sum
    for (let i = 1; i <= arrLimit; i++) {
        if (arr[i]) {
            sum += 2 * i + 1; 
        }
    }

    return sum;
}

console.time("sumOfPrimes");
answers.sumOfPrimes = sumOfPrimes(2000000);
console.timeEnd("sumOfPrimes");
console.log(answers.sumOfPrimes);

/** Pb11
 * In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
 * 08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 * 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 * 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 * 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 * 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 * 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 * 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 * 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 * 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 * 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 * 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 * 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 * 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 * 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 * 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 * 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 * 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 * 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 * 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 * 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
 * The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
 * What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
 */

function largestProductInAGrid() {
    const grid = [
        [ 8,  2, 22, 97, 38, 15,  0, 40,  0, 75,  4,  5,  7, 78, 52, 12, 50, 77, 91,  8],
        [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48,  4, 56, 62,  0],
        [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30,  3, 49, 13, 36, 65],
        [52, 70, 95, 23,  4, 60, 11, 42, 69, 24, 68, 56,  1, 32, 56, 71, 37,  2, 36, 91],
        [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
        [24, 47, 32, 60, 99,  3, 45,  2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
        [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
        [67, 26, 20, 68,  2, 62, 12, 20, 95, 63, 94, 39, 63,  8, 40, 91, 66, 49, 94, 21],
        [24, 55, 58,  5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
        [21, 36, 23,  9, 75,  0, 76, 44, 20, 45, 35, 14,  0, 61, 33, 97, 34, 31, 33, 95],
        [78, 17, 53, 28, 22, 75, 31, 67, 15, 94,  3, 80,  4, 62, 16, 14,  9, 53, 56, 92],
        [16, 39,  5, 42, 96, 35, 31, 47, 55, 58, 88, 24,  0, 17, 54, 24, 36, 29, 85, 57],
        [86, 56,  0, 48, 35, 71, 89,  7,  5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
        [19, 80, 81, 68,  5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77,  4, 89, 55, 40],
        [ 4, 52,  8, 83, 97, 35, 99, 16,  7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
        [88, 36, 68, 87, 57, 62, 20, 72,  3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
        [ 4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18,  8, 46, 29, 32, 40, 62, 76, 36],
        [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74,  4, 36, 16],
        [20, 73, 35, 29, 78, 31, 90,  1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57,  5, 54],
        [ 1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52,  1, 89, 19, 67, 48]
    ];
    
    let maxProduct = 0, product=0;
    
    for (let row = 0; row < 20; row++) {
        for (let col = 0; col < 20; col++) {
            // Horizontal
            if (col <= 16) {
                product = grid[row][col] * grid[row][col+1] * grid[row][col+2] * grid[row][col+3];
                updateMaxProduct(product);
            }
    
            // Vertical 
            if (row <= 16) {
                 product = grid[row][col] * grid[row+1][col] * grid[row+2][col] * grid[row+3][col];
                updateMaxProduct(product);
            }
    
            // Diagonal down-right 
            if (row <= 16 && col <= 16) {
                product = grid[row][col] * grid[row+1][col+1] * grid[row+2][col+2] * grid[row+3][col+3];
                updateMaxProduct(product);
            }
    
            // Diagonal down-left
            if (row <= 16 && col >= 3) {
                 product = grid[row][col] * grid[row+1][col-1] * grid[row+2][col-2] * grid[row+3][col-3];
                updateMaxProduct(product);
            }
        }
    }

    function updateMaxProduct(product) {
        if (product > maxProduct) {
            maxProduct = product;
        }
    }

    return maxProduct;
}

console.time("largestProductInAGrid");
answers.largestProductInAGrid = largestProductInAGrid();
console.timeEnd("largestProductInAGrid");
console.log(answers.largestProductInAGrid);

/** Pb12
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 */

function highlyDivisibleTriangularNumber(divisorCount) {
    let n = 1;
    let triangleNumber = 1;
    
    while (true) {
        let divisors = countDivisors(triangleNumber);
        if (divisors > divisorCount) {
            return triangleNumber;
        }
        triangleNumber += ++n;
    }
}

function countDivisors(triangleNumber) {
    let divisorCount = 1;
    let prime = 2;
    
    while (prime * prime <= triangleNumber && triangleNumber> 1) {
        let exponent = 1;
        while (triangleNumber % prime === 0) {
            exponent++; // the power of the prime factor
            triangleNumber /= prime; // because it is divisible
        }
        divisorCount *= exponent ; 
        prime = prime === 2 ? 3 : prime + 2; // if prime === 2 then prime = 3 else prime = prime + 2
    }

    if (triangleNumber > 1) {
        divisorCount *= 2; // if triangleNumber is prime, then 2 divisors, the number and 1
    }

    return divisorCount;
}

console.time("highlyDivisibleTriangularNumber");
answers.highlyDivisibleTriangularNumber = highlyDivisibleTriangularNumber(500);
console.timeEnd("highlyDivisibleTriangularNumber");
console.log(answers.highlyDivisibleTriangularNumber);


//Logging all answers at the end.
console.log(answers);
